// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                 Int       @id @default(autoincrement())
  username           String    @unique
  password           String
  playlists          Playlist[]
  tracks             Track[]   @relation("UserTracks")
  edits              Edit[]
  uploads            Upload[]
  spotifyUsername    String?   
  socialMediaAccount String?
  firstName          String
  email              String    @unique
}

model Track {
  id             Int       @id @default(autoincrement())
  trackName      String
  artistName     String
  albumName      String
  bpm            Int
  genre          String
  instrumental   Boolean
  voc            Boolean 
  time           Int     
  playlists      Playlist[] @relation("TrackPlaylists")
  uploads        Upload[]
  user           User?      @relation("UserTracks", fields: [userId], references: [id])
  userId         Int?
  edits          Edit[]
}

model Upload {
  id       Int    @id @default(autoincrement())
  name     String
  trackId  Int
  track    Track  @relation(fields: [trackId], references: [id])
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
}

model Playlist {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  ownerId     Int
  owner       User      @relation(fields: [ownerId], references: [id])
  tracks      Track[]   @relation("TrackPlaylists")
}

model Edit {
  id                  Int       @id @default(autoincrement())
  ownerId             Int
  owner               User      @relation(fields: [ownerId], references: [id])
  trackId             Int?
  track               Track?    @relation(fields: [trackId], references: [id])
  trackVocals         Boolean
  trackInstrumental   Boolean
  time                Int
  pitch               Int
  tempo               Decimal
  loop                Boolean
  effects             String
}
